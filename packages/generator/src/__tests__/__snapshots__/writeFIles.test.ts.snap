// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`writeImportsAndExports; with fetchModule (browser) 1`] = `
"import { prepare } from \\"@sb-prisma/client\\";

export { createClient, sb } from \\"@sb-prisma/client\\";
"
`;

exports[`writeImportsAndExports; with fetchModule (node-fetch) 1`] = `
"import fetch from \\"node-fetch\\";
import { prepare } from \\"@sb-prisma/client\\";

export { createClient, sb } from \\"@sb-prisma/client\\";
"
`;

exports[`writeImportsAndExports; with no fetchModule 1`] = `
"import { prepare } from \\"@sb-prisma/client\\";

export { createClient, sb } from \\"@sb-prisma/client\\";
"
`;

exports[`writeOperationMapping 1`] = `
"const operationMapping = {
        aggregateUser: {
            model: \\"User\\",method: \\"aggregate\\"
        },createManyUser: {
            model: \\"User\\",method: \\"createMany\\"
        },createOneUser: {
            model: \\"User\\",method: \\"createOne\\"
        },deleteManyUser: {
            model: \\"User\\",method: \\"deleteMany\\"
        },deleteOneUser: {
            model: \\"User\\",method: \\"deleteOne\\"
        },findFirstUser: {
            model: \\"User\\",method: \\"findFirst\\"
        },findManyUser: {
            model: \\"User\\",method: \\"findMany\\"
        },findUniqueUser: {
            model: \\"User\\",method: \\"findUnique\\"
        },groupByUser: {
            model: \\"User\\",method: \\"groupBy\\"
        },updateManyUser: {
            model: \\"User\\",method: \\"updateMany\\"
        },updateOneUser: {
            model: \\"User\\",method: \\"updateOne\\"
        },upsertOneUser: {
            model: \\"User\\",method: \\"upsertOne\\"
        },aggregateTeam: {
            model: \\"Team\\",method: \\"aggregate\\"
        },createManyTeam: {
            model: \\"Team\\",method: \\"createMany\\"
        },createOneTeam: {
            model: \\"Team\\",method: \\"createOne\\"
        },deleteManyTeam: {
            model: \\"Team\\",method: \\"deleteMany\\"
        },deleteOneTeam: {
            model: \\"Team\\",method: \\"deleteOne\\"
        },findFirstTeam: {
            model: \\"Team\\",method: \\"findFirst\\"
        },findManyTeam: {
            model: \\"Team\\",method: \\"findMany\\"
        },findUniqueTeam: {
            model: \\"Team\\",method: \\"findUnique\\"
        },groupByTeam: {
            model: \\"Team\\",method: \\"groupBy\\"
        },updateManyTeam: {
            model: \\"Team\\",method: \\"updateMany\\"
        },updateOneTeam: {
            model: \\"Team\\",method: \\"updateOne\\"
        },upsertOneTeam: {
            model: \\"Team\\",method: \\"upsertOne\\"
        },
    };
"
`;

exports[`writePrepareFunction; with environments 1`] = `
"prepare({
    endpoint: process.env.SUPABASE_URL || \\"this is SUPABASE_URL\\",apikey: process.env.SUPABASE_ANON_KEY || \\"this is SUPABASE_ANON_KEY\\",
    //@ts-ignore
    fetch,modelMap: {
        operationMapping,relationMapping,tableMapping,
    },
})
"
`;

exports[`writePrepareFunction; with environments and specify keys 1`] = `
"prepare({
    endpoint: process.env.SUPABASE_URL || process.env.SUPABASE_URL_CUSTOM || \\"this is SUPABASE_URL_CUSTOM\\",apikey: process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY_CUSTOM || \\"this is SUPABASE_ANON_KEY_CUSTOM\\",
    //@ts-ignore
    fetch,modelMap: {
        operationMapping,relationMapping,tableMapping,
    },
})
"
`;

exports[`writePrepareFunction; with no environments 1`] = `
"prepare({
    endpoint: process.env.SUPABASE_URL || \\"\\",apikey: process.env.SUPABASE_ANON_KEY || \\"\\",
    //@ts-ignore
    fetch,modelMap: {
        operationMapping,relationMapping,tableMapping,
    },
})
"
`;

exports[`writeRelationMapping 1`] = `
"const relationMapping = {
        User: {
            Team: \\"Team\\",
        },Team: {
            users: \\"User\\",
        },
    };
"
`;

exports[`writeTableMapping 1`] = `
"const tableMapping = {
        User: \\"User\\",Team: \\"teams\\",
    };
"
`;
