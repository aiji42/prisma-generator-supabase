// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`writeImportsAndExports; with fetchModule (browser) 1`] = `
"import { prepare } from \\"@sb-prisma/client\\";

export { createClient, sb } from \\"@sb-prisma/client\\";
"
`;

exports[`writeImportsAndExports; with fetchModule (node-fetch) 1`] = `
"import fetch from \\"node-fetch\\";
import { prepare } from \\"@sb-prisma/client\\";

export { createClient, sb } from \\"@sb-prisma/client\\";
"
`;

exports[`writeImportsAndExports; with no fetchModule 1`] = `
"import { prepare } from \\"@sb-prisma/client\\";

export { createClient, sb } from \\"@sb-prisma/client\\";
"
`;

exports[`writeModels 1`] = `
"const models = {
  User: {
    name: \\"User\\",
    dbName: null,
    isGenerated: false,
    primaryKey: null,
    uniqueFields: [],
    uniqueIndexes: [],
    fields: {
      id: {
        name: \\"id\\",
        kind: \\"scalar\\",
        isList: false,
        isRequired: true,
        isUnique: false,
        isId: true,
        isReadOnly: false,
        type: \\"String\\",
        hasDefaultValue: true,
        default: { name: \\"uuid\\", args: [] },
        isGenerated: false,
        isUpdatedAt: false,
      },
      email: {
        name: \\"email\\",
        kind: \\"scalar\\",
        isList: false,
        isRequired: true,
        isUnique: true,
        isId: false,
        isReadOnly: false,
        type: \\"String\\",
        hasDefaultValue: false,
        isGenerated: false,
        isUpdatedAt: false,
      },
      name: {
        name: \\"name\\",
        kind: \\"scalar\\",
        isList: false,
        isRequired: false,
        isUnique: false,
        isId: false,
        isReadOnly: false,
        type: \\"String\\",
        hasDefaultValue: false,
        isGenerated: false,
        isUpdatedAt: false,
      },
      teamId: {
        name: \\"teamId\\",
        kind: \\"scalar\\",
        isList: false,
        isRequired: false,
        isUnique: false,
        isId: false,
        isReadOnly: true,
        type: \\"Int\\",
        hasDefaultValue: false,
        isGenerated: false,
        isUpdatedAt: false,
      },
      updatedAt: {
        name: \\"updatedAt\\",
        kind: \\"scalar\\",
        isList: false,
        isRequired: true,
        isUnique: false,
        isId: false,
        isReadOnly: false,
        type: \\"DateTime\\",
        hasDefaultValue: true,
        default: { name: \\"now\\", args: [] },
        isGenerated: false,
        isUpdatedAt: true,
      },
      Team: {
        name: \\"Team\\",
        kind: \\"object\\",
        isList: false,
        isRequired: false,
        isUnique: false,
        isId: false,
        isReadOnly: false,
        type: \\"Team\\",
        hasDefaultValue: false,
        relationName: \\"TeamToUser\\",
        relationFromFields: [\\"teamId\\"],
        relationToFields: [\\"id\\"],
        isGenerated: false,
        isUpdatedAt: false,
      },
    },
  },
  Team: {
    name: \\"Team\\",
    dbName: \\"teams\\",
    isGenerated: false,
    primaryKey: null,
    uniqueFields: [],
    uniqueIndexes: [],
    fields: {
      id: {
        name: \\"id\\",
        kind: \\"scalar\\",
        isList: false,
        isRequired: true,
        isUnique: false,
        isId: true,
        isReadOnly: false,
        type: \\"Int\\",
        hasDefaultValue: true,
        default: { name: \\"autoincrement\\", args: [] },
        isGenerated: false,
        isUpdatedAt: false,
      },
      name: {
        name: \\"name\\",
        kind: \\"scalar\\",
        isList: false,
        isRequired: true,
        isUnique: false,
        isId: false,
        isReadOnly: false,
        type: \\"String\\",
        hasDefaultValue: false,
        isGenerated: false,
        isUpdatedAt: false,
      },
      users: {
        name: \\"users\\",
        kind: \\"object\\",
        isList: true,
        isRequired: true,
        isUnique: false,
        isId: false,
        isReadOnly: false,
        type: \\"User\\",
        hasDefaultValue: false,
        relationName: \\"TeamToUser\\",
        relationFromFields: [],
        relationToFields: [],
        isGenerated: false,
        isUpdatedAt: false,
      },
    },
  },
};
"
`;

exports[`writeOperationMapping 1`] = `
"const operationMapping = {
  aggregateUser: {
    model: \\"User\\",
    method: \\"aggregate\\",
  },
  createManyUser: {
    model: \\"User\\",
    method: \\"createMany\\",
  },
  createOneUser: {
    model: \\"User\\",
    method: \\"createOne\\",
  },
  deleteManyUser: {
    model: \\"User\\",
    method: \\"deleteMany\\",
  },
  deleteOneUser: {
    model: \\"User\\",
    method: \\"deleteOne\\",
  },
  findFirstUser: {
    model: \\"User\\",
    method: \\"findFirst\\",
  },
  findManyUser: {
    model: \\"User\\",
    method: \\"findMany\\",
  },
  findUniqueUser: {
    model: \\"User\\",
    method: \\"findUnique\\",
  },
  groupByUser: {
    model: \\"User\\",
    method: \\"groupBy\\",
  },
  updateManyUser: {
    model: \\"User\\",
    method: \\"updateMany\\",
  },
  updateOneUser: {
    model: \\"User\\",
    method: \\"updateOne\\",
  },
  upsertOneUser: {
    model: \\"User\\",
    method: \\"upsertOne\\",
  },
  aggregateTeam: {
    model: \\"Team\\",
    method: \\"aggregate\\",
  },
  createManyTeam: {
    model: \\"Team\\",
    method: \\"createMany\\",
  },
  createOneTeam: {
    model: \\"Team\\",
    method: \\"createOne\\",
  },
  deleteManyTeam: {
    model: \\"Team\\",
    method: \\"deleteMany\\",
  },
  deleteOneTeam: {
    model: \\"Team\\",
    method: \\"deleteOne\\",
  },
  findFirstTeam: {
    model: \\"Team\\",
    method: \\"findFirst\\",
  },
  findManyTeam: {
    model: \\"Team\\",
    method: \\"findMany\\",
  },
  findUniqueTeam: {
    model: \\"Team\\",
    method: \\"findUnique\\",
  },
  groupByTeam: {
    model: \\"Team\\",
    method: \\"groupBy\\",
  },
  updateManyTeam: {
    model: \\"Team\\",
    method: \\"updateMany\\",
  },
  updateOneTeam: {
    model: \\"Team\\",
    method: \\"updateOne\\",
  },
  upsertOneTeam: {
    model: \\"Team\\",
    method: \\"upsertOne\\",
  },
};
"
`;

exports[`writePrepareFunction; not specify keys 1`] = `
"prepare({
    endpoint: process.env.SUPABASE_URL,apikey: process.env.SUPABASE_API_KEY,
    //@ts-ignore
    fetch,modelMap: {
        operationMapping,models,
    },
})
"
`;

exports[`writePrepareFunction; specify keys 1`] = `
"prepare({
    endpoint: process.env.SUPABASE_URL_CUSTOM,apikey: process.env.SUPABASE_API_KEY_CUSTOM,
    //@ts-ignore
    fetch,modelMap: {
        operationMapping,models,
    },
})
"
`;
